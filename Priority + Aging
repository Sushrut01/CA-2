#include<stdio.h>
#include<string.h>
struct priority
{
	char ProcessId[5];
	int status;
	int ArrTime, BurstTime, Priority, WaitTime;
};
int main()
{
	int i,n,j,k,l,bursttime=0;float waittime=0.0;
	float avg;
	struct priority pr[10];
	struct priority temp;
	struct priority temp1;
	printf("Enter the number of process to consider intially: ");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		printf("\nEnter the details for process: %d",i+1);
		printf("\nEnter process id: ");
		scanf("%s",&pr[i].ProcessId);
		//strcpy(pr[i].ProcessId);
		printf("\nEnter arrival time: ");
		scanf("%d",&pr[i].ArrTime);
		printf("\nEnter burst time: ");
		scanf("%d",&pr[i].BurstTime);
		printf("\nEnter priority number: ");
		scanf("%d",&pr[i].Priority);
		/*printf("\nEnter status: T for Teacher and S for Student: ");
		scanf("%s",&pr[i].status);*/
		//strcpy(pr[i].status);
	}
	printf("\n The details are: ");
//	printf("\nProcessId \tArrivalTime \tBurstTime \tPriority \tStatus");
    printf("\nProcessId \tArrivalTime \tBurstTime \tPriority");
	for(i=0;i<n;i++)
	{
	//	printf("\n%s \t\t %d \t\t %d \t\t %d \t\t %s",pr[i].ProcessId,pr[i].ArrTime,pr[i].BurstTime,pr[i].Priority,pr[i].status);
	    printf("\n%s \t\t %d \t\t %d \t\t %d",pr[i].ProcessId,pr[i].ArrTime,pr[i].BurstTime,pr[i].Priority);
	}
	
//sorting of Arrival Time
 /* for(i=0;i<n-1;i++)
      {
            for(j=i+1;j<n;j++)
            {
                  if(pr[i].ArrTime>pr[j].ArrTime)
                  {
                        temp=pr[i];
                        pr[i]=pr[j];
                        pr[j]=temp;
                  }
            }
      }*/
    /*printf("\nAfter sorting Arrival Time: ");
    printf("\n The details are: ");
	printf("\nProcessId \tArrivalTime \tBurstTime \tPriority \tStatus");
    for(i=0;i<n;i++)
    {
    	printf("\n%s \t\t %d \t\t %d \t\t %d \t\t %s",pr[i].ProcessId,pr[i].ArrTime,pr[i].BurstTime,pr[i].Priority,pr[i].status);
	}*/
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(pr[i].ArrTime==pr[j].ArrTime)
			{
			  for(k=0;k<n-1;k++)
     		 {
            for(l=k+1;l<n;l++)
            {
                  if(pr[k].Priority>pr[l].Priority)
                  {
                        temp1=pr[k];
                        pr[k]=pr[l];
                        pr[l]=temp1;
                  }
            }
      		}	
			}
			else
			{
			 for(i=0;i<n-1;i++)
      {
            for(j=i+1;j<n;j++)
            {
                  if(pr[i].ArrTime>pr[j].ArrTime)
                  {
                        temp=pr[i];
                        pr[i]=pr[j];
                        pr[j]=temp;
                  }
            }
      }	
			}
		}
	}
	//finding waiting time
	pr[0].WaitTime = 0;
	for(i=1;i<n;i++)
	{
		pr[i].WaitTime = pr[i-1].WaitTime + pr[i-1].BurstTime;
	}
	printf("\nAfter sorting Priority: ");
    printf("\n The details are: ");
	//printf("\nProcessId \tArrivalTime \tBurstTime \tPriority \tStatus");
	printf("\nProcessId \tArrivalTime \tBurstTime \tPriority \tWaitingTime");
    for(i=0;i<n;i++)
    {
    	//printf("\n%s \t\t %d \t\t %d \t\t %d \t\t %s",pr[i].ProcessId,pr[i].ArrTime,pr[i].BurstTime,pr[i].Priority,pr[i].status);
    	printf("\n%s \t\t %d \t\t %d \t\t %d \t\t %d",pr[i].ProcessId,pr[i].ArrTime,pr[i].BurstTime,pr[i].Priority,pr[i].WaitTime);
	}
	//finding average waiting time
	for(i=0;i<n;i++)
	{
		waittime = waittime + pr[i].WaitTime;
	}
	avg = waittime/n;
	printf("\nAverage Waiting Time is : %f",avg);
}
