#include<stdio.h>

int n,processed[100],pr=0,time=0,i,j;
/*n: number of processes, user enter in main */ /* processed [10] is for store process which
are completed the execution, pr for indexing::::::    time=0 means no process has executed */

struct process  /* user will enter data */
{
 int id,at,bt,pr,wt,shus;
}s[100];

void sort()   /* to sort the process according to their burst time:::: no need   */
{
 struct process temp;
for( j=0;j<n;j++)
 {
 for( i=0;i<n-1;i++)
   {
    if(s[i].bt>s[i+1].bt)
      {
        	temp.id=s[i].id;
		temp.at=s[i].at;
	    	temp.bt=s[i].bt;
	    	temp.pr=s[i].pr;
	    	temp.shus=s[i].shus;
        	s[i].id=s[i+1].id;
		s[i].at=s[i+1].at;
		s[i].bt=s[i+1].bt;
	    	s[i].pr=s[i+1].pr;
        	s[i].shus=s[i+1].shus;
        	s[i+1].id=temp.id;
		s[i+1].at=temp.at; 
		s[i+1].bt=temp.bt;  
		s[i+1].pr=temp.pr;
		s[i+1].shus=temp.shus;
      }
   }
 }
}
void show()   /* function to show the sorted processes */
{
 for( i=0;i<n;i++)
  {
   printf("%d \t%d \t%d \t%d\n",s[i].id,s[i].at,s[i].bt,s[i].pr);
  }
}

int main()
{
int burst_time,wtavg;
float avg_wait;
printf("Enter the number of process you want to enter: ");
scanf("%d",&n);
printf("\nEnter the process details: ");
for(i=0;i<n;i++)
{
 printf("\nEnter the process id: ");
 scanf("%d",&s[i].id);
 printf("\nEnter the arrival time: ");
 scanf("%d",&s[i].at);
 printf("\nEnter the burst time: ");
 scanf("%d",&s[i].bt);
 s[i].shus=s[i].bt;
 printf("\nEnter the priority(0 for teacher/1 for student): ");
 scanf("%d",&s[i].pr);
 burst_time = burst_time+s[i].bt;
}  

sort();

time=s[1].at;     /* assigning minimum arruval time among all processes time */
//show();
int i=-1;
int extime=0;
for(time;time<burst_time;)         /* total burst time is summation of all the burst time of processes */
 {
   int pfound=-1,cfound=-1;    /* pfound=parent    cfound=child  */
  i++;              
           /* i helps me to be in the range of 0->n only  */
  for( j=0;j<n;j++)
   {
    if(s[j].at<=time && s[j].bt>0 && s[j].pr==1)    //fcfs for teacher
      { pfound=1;
	    cfound=0; 
		extime=s[j].bt; 
		s[j].bt=-1; 
	//	printf("if\n"); 
		processed[pr++]=s[j].id; 
		break; 
	  }
 /* if parent come then pfound=1 & cfound=0 , putting bt of parent to -1    so that it can't enter again .. storing in processed and break*/
    else
      {
        pfound=0;                     //sjf for student
		cfound=1; 
		//printf("else\n");    /* cfound=1...pfound=0.. */
        s[j].bt--;                      /* reducing 1 from child   */
        if(s[j].bt==0)            /* if(bt==0) because bt is reduced with 1*/
           {
             processed[pr++]=s[j].id;  /* save child in processed array  */
              s[j].bt=-1;          /*  put bt=-1  */
           }
       }
   }

 if(cfound==1)   /* child condition */
  {
    time++;    //    printf("child\n"); time++;
  }
 else if(pfound==1)  /* parent cond.  */
  {
    time=time+extime; //  printf("parent\n"); time++;
  }

  if(i>n-1)
   i=i-n;
  //printf("******\n");
 }


/*printf("Order of Execution\n");
for( i=0;i<pr;i++)
 printf("p[%d] ",processed[i]);*/

printf("\nProcess Name\tArrival Time\tBurst Time\tPriority\tWaiting Time");
s[0].wt = 0;
for(i=1;i<n;i++)
{
s[i].wt = s[i-1].wt + s[i-1].shus;
//tat[i] = tat[i-1] + bt[i];
wtavg = wtavg + s[i].wt;
//tatavg = tatavg + tat[i];
}

for(i=0;i<n;i++)
{
	printf("\n%d \t\t %d \t\t %d \t\t %d \t\t %d ",s[i].id,s[i].at,s[i].shus,s[i].pr,s[i].wt);
}

  avg_wait = wtavg/n;
  printf("\nAverage waiting time is: %f",avg_wait);
}
