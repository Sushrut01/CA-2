#include<stdio.h>
#include<string.h>
#include<conio.h>
void main()
{
	char process[10][5],temp[5];
	int i,j,burst_time[10],wait_time[10],total_wait=0,priority[10],temp1,n;
	float avg_wait;
	printf("Enter the number of processes in students queue: ");//for students
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		printf("Enter the process%d id: ",i+1);
  		scanf("%s",&process[i]);
		printf("Enter the burst time: ");
		scanf("%d",&burst_time[i]);
		printf("Enter the priority: ");
		scanf("%d",&priority[i]);
	}
  	for(i=0;i<n-1;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(priority[i]>priority[j])
			{
				temp1=priority[i];
				priority[i]=priority[j];
				priority[j]=temp1;
				temp1=burst_time[i];
				burst_time[i]=burst_time[j];
				burst_time[j]=temp1;
				strcpy(temp,process[i]);
				strcpy(process[i],process[j]);
				strcpy(process[j],temp);
			}
		}
	}
	wait_time[0]=0;
	for(i=1;i<n;i++)
	{
		wait_time[i]=burst_time[i-1]+wait_time[i-1];
		total_wait=total_wait+wait_time[i];
	}
	avg_wait=(float)total_wait/n;
	printf("p_name\t p_time\t priority\t w_time\n");
	for(i=0;i<n;i++)
	{
	   printf(" %s\t %d\t %d\t\t %d\n" ,process[i],burst_time[i],priority[i],wait_time[i]);
	}
	printf("\nThe total waiting time=%d\nThe average waiting time=%f\n",total_wait,avg_wait);
	
	
	//end of students queue
	
	//applying round robin for teachers process
	int time_quantum,process_id[10],need[10],wait_t1[10],turn_around_time[10],i1,j1,n2,n1;
	int burst_t[10],flag[10],total_turn_around_time=0,total_wait_time=0;
	float avg_wait_time,avg_turn_around_time;
 	printf("\nEnter the number of Processes in teachers queue: \n");
	scanf("%d",&n);
	n1=n;
	printf("\nEnter the Time quantum: ");
 	scanf("%d",&time_quantum);
 	for(i=1;i<=n;i++)
	{
   		printf("\nEnter the process id: ");
		scanf("%d",&process_id[i]);
   		printf("\nEnter the Burst Time for the process: ");
   		scanf("%d",&burst_t[i]);
   		need[i]=burst_t[i];
 	}
 	for(i=1;i<=n;i++)
	{
		flag[i]=1;
  		wait_time[i]=0;
 	}
 	while(n!=0)
	{
   		for(i=1;i<=n;i++)
   		{
     		if(need[i]>=time_quantum)
     		{
       			for(j=1;j<=n;j++)
				{
	  				if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  				wait_time[j]+=time_quantum;
	  				
       			}
      			need[i]-=time_quantum;
      			if(need[i]==0)
      			{
	 				flag[i]=0;
	 				n--;
       			}
     		}
     		else
    		{
       			for(j=1;j<=n;j++)
       			{
	  				if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  				wait_time[j]+=need[i];
       			}
       			need[i]=0;
       			n--;
       			flag[i]=0;
  			}
 		}
	}
	for(i=1;i<=n1;i++)
	{
  		turn_around_time[i]=wait_time[i]+burst_t[i];
  		total_wait_time=total_wait_time+wait_time[i];
  		total_turn_around_time=total_turn_around_time+turn_around_time[i];
	}
	avg_wait_time=total_wait_time/n1;
	avg_turn_around_time=total_turn_around_time/n1;
	printf("\n\n Process \t Process ID  \t BurstTime \t Waiting Time \t TurnaroundTime \n ");
	for(i=1;i<=n1;i++)
	{ 
 		printf("\n %d \t\t %d \t\t %d \t\t %d \t\t %d \n", i,process_id[i],burst_t[i],wait_time[i],turn_around_time[i]);
	}
	printf("\nThe average Waiting Time=%f",avg_wait_time);
	printf("\nThe average Turn around Time=%f",avg_turn_around_time);
}
